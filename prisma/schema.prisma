generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  phone            String?   @unique
  phoneVerified    DateTime?
  image            String?
  passwordHash     String?
  role             Role      @default(USER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  accounts         Account[]
  addresses        Address[]
  carts            Cart[]
  orders           Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OtpVerification {
  id          String   @id @default(cuid())
  phone       String
  otp         String
  attempts    Int      @default(0)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  verifiedAt  DateTime?
  
  @@index([phone])
  @@index([expiresAt])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parentId    String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  icon        String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@index([parentId])
  @@index([isActive])
  @@index([sortOrder])
}

model Product {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String?
  images      String[]         @default([])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  meta        Json?
  categoryId  String?
  category    Category?        @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]

  @@index([categoryId])
}

model ProductVariant {
  id           String      @id @default(cuid())
  productId    String
  sku          String?     @unique
  unit         Unit
  amount       Float
  price        Int
  originalPrice Int?       // Original price before discount (for slashed pricing)
  stock        Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  metadata     Json?
  cartItems    CartItem[]
  orderItems   OrderItem[]
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  sessionId String     @unique
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String         @id @default(cuid())
  cartId    String
  variantId String
  quantity  Int
  unitPrice Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  cart      Cart           @relation(fields: [cartId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])

  @@index([cartId])
}

model Order {
  id                 String      @id @default(cuid())
  userId             String?
  customerName       String
  phone              String
  address            String
  city               String?
  pincode            String?
  totalAmount        Int
  status             OrderStatus @default(PLACED)
  paymentMode        String
  paymentMeta        Json?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  cancellationReason String?
  user               User?       @relation(fields: [userId], references: [id])
  items              OrderItem[]
}

model OrderItem {
  id        String         @id @default(cuid())
  orderId   String
  variantId String
  quantity  Int
  unitPrice Int
  total     Int
  order     Order          @relation(fields: [orderId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  name      String?
  phone     String?
  line1     String
  line2     String?
  city      String
  state     String?
  pincode   String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum Unit {
  PIECE
  KG
  G
  LITER
  ML
  OTHER
  CM
  M
  INCH
}

enum OrderStatus {
  PLACED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Banner {
  id          String   @id @default(cuid())
  imageUrl    String
  title       String?
  description String?
  link        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, sortOrder])
}
