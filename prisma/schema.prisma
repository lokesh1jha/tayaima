generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth and Users
enum Role {
  USER
  ADMIN
}

model User {
  id            String   @id @default(cuid())
  name          String? 
  email         String   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          Role     @default(USER)

  // Password reset fields
  resetToken    String?   // Token for password reset
  resetTokenExpiry DateTime? // Expiry time for reset token

  accounts      Account[]
  orders        Order[]
  carts         Cart[]
  addresses     Address[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// E-commerce domain

enum Unit {
  PIECE
  KG
  G
  LITER
  ML
  OTHER
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  products    Product[]
  
  // Parent category support
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[] @relation("CategoryHierarchy")
  
  // Category metadata
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  icon        String?  // Icon name or URL for the category
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name])
  @@index([parentId])
  @@index([isActive])
  @@index([sortOrder])
}

model Product {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String?
  // A product can have multiple variants (e.g., 500g, 1kg, 250ml)
  variants    ProductVariant[]
  images      String[]         @default([])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  meta        Json?

  // Category relation (optional for backward compatibility)
  category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   String?

  @@index([categoryId])
}

model ProductVariant {
  id          String   @id @default(cuid())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  sku         String?  @unique
  unit        Unit
  amount      Float    // numeric amount (eg. 1.0 or 500 => interpreted by unit)
  price       Int      // price in smallest currency unit (e.g., paise)
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json?

  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([productId])
}

model Cart {
  id         String     @id @default(cuid())
  sessionId  String     @unique // or userId for logged in users; for guests store session id
  userId     String?    // optional FK if logged-in user
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  items      CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id             String         @id @default(cuid())
  cart           Cart           @relation(fields: [cartId], references: [id])
  cartId         String
  variant        ProductVariant @relation(fields: [variantId], references: [id])
  variantId      String
  quantity       Int
  unitPrice      Int      // snapshot of price at time of add (paise)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([cartId])
}

enum OrderStatus {
  PLACED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id                 String       @id @default(cuid())
  userId             String?
  user               User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  customerName       String
  phone              String
  address            String
  city               String?
  pincode            String?
  totalAmount        Int          // paise
  status             OrderStatus  @default(PLACED)
  paymentMode        String       // e.g. 'COD', 'PHONEPE'
  paymentMeta        Json?
  cancellationReason String?      // Optional reason for cancellation
  items              OrderItem[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model OrderItem {
  id         String         @id @default(cuid())
  order      Order          @relation(fields: [orderId], references: [id])
  orderId    String
  variantId  String
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  quantity   Int
  unitPrice  Int
  total      Int
}

model Address {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  name       String?
  phone      String?
  line1      String
  line2      String?
  city       String
  state      String?
  pincode    String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}